#include <iostream>
#include <stdio.h>
#include <limits.h>
#include <stdlib.h>
#include <vector>
#include <fstream>
#include <string>

using namespace std;


class Graph {
private:
    int begin_index;
    int end_index;
    int size_Graph;
    int waySize_Graph;
    vector<int> FIKS;
    vector<int> MIN_WEG;
    vector<int> VON_PUNKT;
    vector< vector<int> > DUG;
    int min = INT_MAX;
    int min_index = INT_MAX;
    int max = INT_MAX;
    
public:


    Graph(int size) {
        size_Graph = size;
        FIKS.reserve(size_Graph);
        MIN_WEG.reserve(size_Graph);
        VON_PUNKT.reserve(size_Graph);
        DUG.reserve(size_Graph);
        
        
        for (int i = 0; i < size_Graph; i++) {
            FIKS.push_back(0);
            VON_PUNKT.push_back(0);
            //MIN_WEG.push_back(max);
            vector<int> temp(size_Graph);
            DUG.push_back(temp);
        }
        
    };
    
    
    void read(string name){
        int arr[size_Graph][size_Graph];
    
    
    string path = name;
    ifstream fin;
    fin.open(path);
    
        
        for (int i = 0; i < size_Graph; i++)
        {
            for (int j = 0; j < size_Graph; j++)
            {
                fin >> arr[i][j];
                if(arr[i][j] == 0){DUG[i][j] = INT_MAX; }
                else DUG[i][j] = arr[i][j];
            }
        }
    
    
    };
    
    
   void make_Graph(int begin) {
        vector<int> temp(size_Graph);
        for (int i = 0; i < size_Graph; i++) {
            temp.push_back(INT_MAX);

        }
        begin_index = begin;
        int a;
        for (int i = 0; i < size_Graph; i++) {
            DUG[i][i] = INT_MAX;
            
            
        }
        for(int i = 0; i < size_Graph; i++){
            MIN_WEG[i] = DUG[begin][i];
        }
        FIKS[begin] = 1;
        VON_PUNKT[0] = 0;
        
        
    
    };

    void D(int end) {
        
    end_index = end;
    
    do{   
    min_index = INT_MAX;
    min = INT_MAX;
    int temp;
    for (int i = 0; i<size_Graph; i++){ 
      if ((FIKS[i] == 0) and (MIN_WEG[i] < min))
      { 
        min = MIN_WEG[i];
        min_index = i;
       
      }
    }
    
    if (min_index != INT_MAX){
      for (int i = 0; i<size_Graph; i++){
           
        if (DUG[min_index][i] < INT_MAX and FIKS[i] == 0){ 
           
          temp = min + DUG[min_index][i];
          if (temp < MIN_WEG[i])
          {
            MIN_WEG[i] = temp;
            
          }
        }
      }
      FIKS[min_index] = 1;
    }
    }while(min_index < INT_MAX);
  
  
        
  
  int _end_index = end_index;
  VON_PUNKT[0] = _end_index + 1; 
  int k = 1;
  int weight = MIN_WEG[_end_index]; 
  
      while(begin_index != _end_index){
      
   for(int i = 0; i < size_Graph; i++){
       if (DUG[i][_end_index] < INT_MAX){
           if(weight - DUG[i][_end_index] == MIN_WEG[i] or weight - DUG[i][_end_index] == 0){
              VON_PUNKT[k] = i + 1;
              k++;
              weight = weight - DUG[i][_end_index];
              _end_index = i;
              //cout << 1 << endl;
             
           };
           
       }
       
   }
      //
          
      }
    };

    void print() {
        FILE * file = fopen ( "way.txt" , "a" );
        fprintf(file, "%d ", begin_index + 1);
        fprintf(file, "%d ", end_index + 1);
        for(int i = size_Graph - 1; i >= 0; i--){
            if(VON_PUNKT[i] != 0 ){
                fprintf(file, "%d ", VON_PUNKT[i]);
                
            }
        
    }
    fprintf(file, "\n");
    fclose(file);

    
    }
   
    
    
    
};

int main()
{   int instruction;
int size;
int begin;
int end;
string file_name;
    do{
    cout << "Введите размер графа: ";
    cin >> size;
    Graph Graph1(size);
    cout << "Введите название файла с графом. Не забудьте написать его расширение! : " << endl;
    cin >> file_name;
    Graph1.read(file_name);
    cout << "Введите начальную вершину " ;
    cin >> begin;
    cout << "Введите конечную вершину " ;
    cin >> end;
    Graph1.make_Graph(begin - 1);
    Graph1.D(end - 1);
    Graph1.print();
    cout << "Ваш путь от " << begin << " до " << end << "находится в файле way.txt" << endl;
    cout << "Введите 0, если хотите закончить. Чтобы продолжить введите любое другое число.";
    cin >> instruction;
}while(instruction != 0);
    return 0;
};
